- player_private.reload
.playerMain
  table.player
    tr
      th Playing as:
      td= player_private.name
    - if player_private.pending_actions.active.present?
      tr
        th Waiting for you to:
        td= player_private.pending_actions.active.reject{|a| a.text.nil? || a.text.empty?}.map {|a| a.text}.join(', ')
    tr
      th Deck:
      td= "#{player_private.cards.deck.length} cards"
    tr
      th Hand:
      - if !player_private.cards.hand.empty? || !controls[:hand].empty?
        td
          .full_cards
            = render partial: 'control_preamble', collection: controls[:hand]
            = render partial: 'card_with_ctrls', collection: zip_cards_and_ctrls(player_private.cards.hand, controls[:hand])
            = render partial: 'controls_postamble', object: controls[:hand]

      - else
        td None
    - if !player_private.cards.in_play.empty?
      tr
        th In Play:
        td
          .full_cards
            = render partial: 'control_preamble', collection: controls[:play]
            = render partial: 'card_with_ctrls', collection: zip_cards_and_ctrls(player_private.cards.in_play, controls[:play])
            = render partial: 'controls_postamble', object: controls[:play]
    tr
      th Discard:
      - if !player_private.cards.in_discard.empty?
        td
          .full_cards.ghosted
            = render partial: 'card_with_ctrls', collection: zip_cards_no_ctrls(player_private.cards.in_discard)
      - else
        td None
    - if (!player_private.cards.enduring.empty?) || (!controls[:durations].empty?)
      tr
        th Durations:
        td
          .full_cards= render partial: 'card_with_ctrls', collection: zip_cards_no_ctrls(player_private.cards.enduring)
    - if (!player_private.cards.revealed.empty?) || (!controls[:revealed].select { |c| c[:player_id] == player_private.id }.empty?)
      tr
        th Revealed:
        td
          .full_cards
            - revealed_controls = controls[:revealed].select { |c| c[:player_id] == player_private.id }
            = render partial: 'control_preamble', collection: revealed_controls
            = render partial: 'card_with_ctrls', collection: zip_cards_and_ctrls(player_private.cards.revealed, revealed_controls)
            = render partial: 'controls_postamble', object: revealed_controls
    - if (!player_private.cards.peeked.empty?) || (!controls[:peeked].empty?)
      tr
        th= controls[:peeked].andand[0].andand[:label] || "Looked at:"
        td
          .full_cards
            = render partial: 'control_preamble', collection: controls[:peeked]
            = render partial: 'card_with_ctrls', collection: zip_cards_and_ctrls(player_private.cards.peeked, controls[:peeked])
            = render partial: 'controls_postamble', object: controls[:peeked]

    - if !player_private.cards.of_type("Seaside::PirateShip").empty?
      tr
        th Pirate Coins:
        td= player_private.state.pirate_coins
    - if player_private.score && player_private.score != 0
      tr.scoreRow
        th Score:
        td= player_private.score
    - if player_private.cash
      tr: td &nbsp;
      tr
        th Actions:
        td= player_private.actions
      tr
        th Buys:
        td= player_private.buys
      tr
        th Cash:
        td= player_private.cash
  - if !controls[:player].empty?
    tr
      td[colspan="2"]
        table
          - controls[:player].each do |control|
            - control_form(control)
            tr
              - case control[:type]
                - when :buttons
                  td= control[:label]
                  - control[:options].each do |opt|
                    td
                      - key = opt.keys.detect{|k| k != :text}
                      = button_tag opt[:text], type: 'submit',
                                                name: key,
                                                value:  opt[key],
                                                form: "form_#{control.object_id}",
                                                disable_with: opt[:text],
                                                class: control[:css_class]
                - when :checkboxes
                  td: table.choices
                    tr: th[colspan=control[:choices].length]= control[:label]
                    tr
                      - control[:choices].each_with_index do |choice, ix|
                        td
                          = check_box_tag(control[:name] + "[]", ix, false,
                                           id: "#{control.object_id}_#{ix}",
                                           form: "form_#{control.object_id}",
                                           class: control[:css_class])
                          = label_tag("#{control.object_id}_#{ix}", choice, class: control[:css_class])
                      td= submit_tag(control[:button_text],
                                      form: "form_#{control.object_id}",
                                      disable_with: control[:button_text],
                                      class: control[:css_class])
                - when :dropdown
                  td
                    = control[:label]
                    = select_tag(control[:name], options_for_select(control[:choices], control[:selected]),
                                  id: "#{control.object_id}_#{control[:name]}",
                                  form: "form_#{control.object_id}",
                                  class: control[:css_class])
                    = submit_tag(control[:button_text],
                                  form: "form_#{control.object_id}",
                                  disable_with: control[:button_text],
                                  class: control[:css_class])
- set_aside = set_aside_area(player_private, false)
- if set_aside != ""
 .setAside: table.player= raw set_aside
