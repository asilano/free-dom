#last_changed
  ' Game state last changed at:
  span#last_change_value
    = @last_mod.httpdate
#last_refreshed
  ' Last checked for changes at:
  span#last_refresh_value
    = Time.new.httpdate
#update_freq.lighter
  - if @player
    '  Updating every
    span#update_freq_value= @player.settings.update_interval
    span#update_freq_form.hidden
      = form_tag({action: :update_player_settings, id: @game}, remote: true) do
        = text_field_tag "settings[update_interval]", @player.settings.update_interval, size: 4
        = submit_tag "Set"
    '  seconds.
    span#change_freq= link_to_function "Change.", "enable_freq_form()"
    span#cancel_freq.hidden= link_to_function "Cancel.", "disable_freq_form()"
    javascript:
      function enable_freq_form() {
        $('#update_freq').removeClass("lighter");
        $('#update_freq_value').hide();
        $('#update_freq_form').show();
        $('#change_freq').hide();
        $('#cancel_freq').show();
      };
      function disable_freq_form() {
        $('#update_freq').addClass("lighter");
        $('#update_freq_value').show();
        $('#update_freq_form').hide();
        $('#change_freq').show();
        $('#cancel_freq').hide();
      }
  - else
    - freq = @user ? @user.settings.update_interval : 60
    |  Updating every #{freq} seconds.
#status
  #ended.hidden= game.state == 'ended'
  #locked.hidden false
  - if game.questions.any? { |q| q.actor }
    #waiting_for
      span Waiting for:
      ul
        - game.questions.select { |q| q.actor }.each do |q|
          li= q.actor.name + " to " + q.text
- if player
  #player_private
    = render partial: 'player_private', object: player,
              locals: {controls: controls}
    / Present a start button to the first-joined player,
    / so long as there are more than 2 and the game is waiting
    - if (@game.players.length >= 2 && player == @game.players[0] && @game.state == 'waiting')
      #start_button
        = form_for(Journal.new, html: { remote: true, id: 'start_form'}) do |f|
          = f.hidden_field :game_id, value: @game.id
          = f.hidden_field :event, value: "#{player.name} started the game"
          = f.submit 'Start Game', id: 'start_game_btn', class: 'play'
        javascript:
          $('#start_form').on('ajax:beforeSend', function(){
            $('#gameStartSpinner').show();
            $(this).attr('disabled', true).val('Please wait...');
          }).on('ajax:complete', function(){
            $('#gameStartSpinner').hide();
            $('#start_button').remove();
          }).on('ajax:error', function(){
            alert('Sorry, something went wrong. Please refresh and try again');
          });
  hr
- elsif @user && (game.users.include?(@user) || (game.state == 'waiting' && game.players.length < game.max_players))
  #join_button
    = button_to "Join Game", join_game_path(game), class: 'play'
= raw game_facts(game)
#other_players
  - other_players = game.players.reject { |p| p == player }
  - if player && player.seat
    - other_players = other_players.sort_by { |p| (p.seat - player.seat) % game.players.length }
  =render partial: 'player', collection: other_players, locals: {controls: controls}
h1 Buy Piles
#piles
  - if controls.include? :piles
    - controls[:piles].each do |control|
      - control_form(control)
  - spacer_count = 0
  .pile.non-pile
    .buttons
      - controls[:piles].each do |control|
        - case control[:type]
          - when :button
            - spacer_count += 1
            = button_tag(control[:nil_action],
                         type: 'submit',
                         name: "nil_action",
                         value: control[:nil_action],
                         form: "form_#{control.object_id}",
                         disable_with: control[:nil_action],
                         class: (control[:nil_action] ? '' : ' placeholder') + (control[:css_class] || ''),
                         disabled: !controls[:nil_action])
    - spacer_count.times do |_|
      .button-spacer
  = render partial: 'pile', collection: game.piles, locals: {controls: controls, num_players: game.players.length}

= content_for :control_forms

/ Spinner images here so they get overwritten and disappear on refresh
= image_tag('start_game_spinner.gif', id: 'gameStartSpinner', class: 'hidden')
= image_tag('spinner.gif', id: 'spinner', class: 'hidden')
- if game.state == 'ended'

  #result
    p.centred.header Game Over - Results
    - ply_ordered = game.players.sort_by {|p| p.score}.reverse
    ul#resultList
      li.resultEntry.winner
        span.name= "#{ply_ordered[0].name} - Winner with #{ply_ordered[0].score} points! "
        = link_to('(show deck)', '#', class: 'showHideDeck showDeck')
        = link_to('(hide deck)', '#', class: 'showHideDeck hideDeck')
        p.deckList.hidden= raw ply_ordered[0].cards_for_decklist
      - ply_ordered.each_with_index do |ply, ix|
        - if ix != 0
          li.resultEntry
            span.name= "#{ply.name} - #{%w<first second third fourth fifth sixth>[ix]} with #{ply.score} points "
            = link_to('(show deck)', '#', class: 'showHideDeck showDeck')
            = link_to('(hide deck)', '#', class: 'showHideDeck hideDeck')
            p.deckList.hidden= raw ply_ordered[ix].cards_for_decklist
    p.centred.gapAbove= link_to "Back to Index", games_path
    a.hide-link[href='#'] Close
  javascript:
    $('.resultEntry').on('click', '.showDeck', function() {
      $(this).hide();
      $(this).siblings('.hideDeck').show();
      $(this).siblings('.deckList').slideDown();
    }).on('click', '.hideDeck', function() {
      $(this).hide();
      $(this).siblings('.showDeck').show();
      $(this).siblings('.deckList').slideUp();
    });
    $('#result').on('click', '.hide-link', function() {
      $('#result').slideUp();
    });
