- player = @game.game_state.player_for(current_user)
.cell.player#current-player
  h2= current_user.name
  / Player-button controls
  - @game.question.controls_for(current_user, @game.game_state).select { |ctrl| ctrl.scope == :player }.each do |ctrl|
    = form_with model: @game.journals.build do |f|
      = f.hidden_field :game_id
      = f.hidden_field :type, value: @game.question.journal_type
      - ctrl.values.each do |val|
        = f.button val[0], value: val[1], name: "journal[params][#{ctrl.key}]", class: 'button', data: { disable_with: val[0] }

  / Cards held in hand
  h5 Hand
  - hand_controls = @game.question.controls_for(current_user, @game.game_state).select { |ctrl| ctrl.scope == :hand }
  = render partial: 'control_skeleton', collection: hand_controls
  .grid-container.fluid
    .card-grid
      = render partial: 'card', collection: player.hand_cards, locals: { controls: hand_controls }
      - if hand_controls.any?(&:cardless_button)
        .cell.card.null-card
          .card-name
          - hand_controls.each do |ctrl|
            - if ctrl.cardless_button
              .card-ctrl= render partial: 'controls/cardless_button', object: ctrl.cardless_button, as: :button, locals: { control: ctrl }

  / Cards in play
  h5 In Play
  - play_controls = @game.question.controls_for(current_user, @game.game_state).select { |ctrl| ctrl.scope == :play }
  = render partial: 'control_skeleton', collection: play_controls
  .grid-container.fluid
    .card-grid
      - if player.played_cards.blank?
        .cell.card.no-card
          .card-name
      - else
        = render partial: 'card', collection: player.played_cards, locals: { controls: play_controls }
        - if play_controls.any?(&:cardless_button)
          .cell.card.null-card
            .card-name
            - play_controls.each do |ctrl|
              - if ctrl.cardless_button
                .card-ctrl= render partial: 'controls/cardless_button', object: ctrl.cardless_button, as: :button, locals: { control: ctrl }

  / Cards in discard
  h5 Discarded
  .grid-container.fluid
    .card-grid
      - if player.discarded_cards.blank?
        .cell.card.no-card
          .card-name
      - else
        = render partial: 'card', collection: player.discarded_cards, locals: { controls: [] }

  / Deck representation
  h5 Deck
  .grid-container.fluid
    .grid-x.grid-margin-x
      .cell.card{class=('no-card' if player.deck_cards.empty?)}
        .card-back= player.deck_cards.count

  / Cash, actions, buys
  - if player == @game.game_state.turn_player
    h5 Status
    .turn-status
      .counts
        .count= pluralize(player.actions, 'Action')
        .count= pluralize(player.buys, 'Buy')
      .cash
        span.cost-text= player.cash
