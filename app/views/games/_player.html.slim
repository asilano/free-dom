div[class=['player', ('curr_turn' if player.game.current_turn_player == player)]]: table
  tr
    th= player.name
    td: span.lighter Updating: #{player.settings.update_interval}s
  tr
    th Deck:
    td= player.cards.deck.count
  tr
    th Hand:
    td= player.cards.hand.count
  tr
    th Play:
    td
      - if (!player.cards.in_play.blank?)
        .full_cards
          = render partial: 'card_with_ctrls', collection: zip_cards_no_ctrls(player.cards.in_play)
  - if (!player.cards.enduring.blank?)
    tr
      th Durations:
      td: .full_cards
        = render partial: 'card_with_ctrls', collection: zip_cards_no_ctrls(player.cards.enduring)
  tr
    th Discard:
    - if !player.cards.in_discard.blank?
      td: .full_cards
        = render partial:'card_with_ctrls', collection: [[player.cards.in_discard[0], nil]]
        div and #{player.cards.in_discard.count - 1} others
    - else
      td None
  - if !player.cards.revealed.blank? || !controls[:revealed]&.select { |c| c[:player_id] == player.id }.blank?
    tr
      th Revealed:
      td: .full_cards
        - ctrls = controls[:revealed].select { |c| c[:player_id] == player.id }
        = render partial: 'control_preamble', collection: ctrls
        = render partial: 'card_with_ctrls', collection: zip_cards_and_ctrls(player.cards.revealed, ctrls)
        = render partial: 'controls_postamble', object: ctrls
  - if !player.cards.of_type("Seaside::PirateShip").blank?
    tr
      th Pirate Coins:
      td= player.state.pirate_coins
  = raw set_aside_area(player)
  - if player.score.andand != 0
    tr.scoreRow
      th Score:
      td= player.score
  - if !controls[:other_players]&.select { |c| c[:player_id].to_i == player.id }.blank?
    tr
      td[colspan="2"]
        table
          - controls[:other_players].select {|c| c[:player_id].to_i == player.id}.each do |control|
            - control_form(control)
            tr
              - case control[:type]
                - when :buttons
                  td= control[:label]
                  - control[:options].each do |opt|
                    td
                      - key = opt.keys.detect{|k| k != :text}
                      = button_tag opt[:text], type: 'submit',
                                                name: key,
                                                value: opt[key],
                                                form: "form_#{control.object_id}",
                                                disable_with: opt[:text]
