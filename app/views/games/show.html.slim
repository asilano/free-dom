- content_for :title, (@game.name.presence || "Game ##{@game.id}")
- if @game.questions.present?
  - content_for :waiting_title, "Waiting for #{@game.questions.map(&:player).map(&:name).join(', ')}"
.cell
  .grid-container.fluid
    .grid-x
      .cell#game-title
        - game_title = "Game #{@game.id}"
        - game_title << " â€” #{@game.name}" if @game.name.present?
        h2= game_title
      .cell#discord-report
        - if @game.discord_webhook.present?
          span> Posting to Discord
          span.js> - click to edit
        - else
          span> Not posting to Discord
          span.js> - click to add
        = form_with model: @game, class: 'inline hide-js' do |f|
          = text_field_tag 'game[discord_webhook]', @game.discord_webhook, class: 'inline'
          = f.submit 'Change', class: 'inline hide-js'
- if @game.run_state == :waiting && !@game.users.include?(current_user)
  .cell.border-under
    .grid-container.fluid.grid-x
      .cell
        p You are not currently in this game
        = form_with model: @game.journals.build do |f|
          = f.hidden_field :game_id
          = f.hidden_field :type, value: GameEngine::AddPlayerJournal
          = f.hidden_field :user_id, value: current_user.id
          = f.hidden_field :order, value: (@game.journals.maximum(:order) || 0) + 1
          = f.submit 'Join game'
- elsif @game.run_state == :ended
  .cell.border-under#game-summary
    .grid-container.fluid.grid-x
      .cell
        h3 Game Over &mdash; Scores
        ul.scores
          - @game.game_state.players.sort_by(&:score).reverse.each.with_index do |player, ix|
            li
              .player-result #{player.name} &mdash; #{player.score} points
              .player-deck
                - player.decklist.each do |entry|
                  - score_part = entry[:score].nil? ? '' : " (#{pluralize(entry[:score], 'pt')})"
                  span> #{entry[:count]}x
                  span.card{data-tooltip class=entry[:types] title=entry[:text]} #{entry[:name]}#{score_part}
                  span #{entry[:last] ? '.' : ', '}
- elsif @game.questions.present?
  .cell.border-under
    .grid-container.fluid.grid-x
      .cell
        strong> Current question:
        ul.question-list
          - @game.questions.compact.each do |question|
            li= question.player.name + ': ' + question.text(@game.game_state)

.cell.border-under
  .grid-container.fluid
    - if @game.users.include? current_user
      .grid-x.grid-margin-x.this-player
        = render 'player'

.cell.border-under
  .grid-container.fluid
    .grid-x.grid-margin-x
      - @game.game_state.other_players(exclude_user: current_user).each do |player|
        = render partial: 'other_player', object: player

.cell
  .grid-container.fluid
    .grid-x.grid-margin-x
      = render partial: 'pile_section'

      .cell.small-12.medium-6.large-4#journal-log
        .current-question
          - if @game.questions.any?
            strong> Current question:
            ul.question-list
              - @game.questions.compact.each do |question|
                li= question.player.name + ': ' + question.text(@game.game_state)
          - elsif @game.run_state != :ended
            strong> No question - check journals!

        ul
          - last_fixed_journal = @game.last_fixed_journal_for(current_user)
          - last_shown_journal_id = 0
          - @game.journals.each do |journal|
            - next unless journal.persisted?
            - if journal.histories.present?
              - last_shown_journal_id = journal.id unless (journal.histories.first.secret? && journal.user != current_user)
              - if journal.histories.length > 1
                - content_for "journal_#{last_shown_journal_id}_histories" do
                  - journal.histories[1..-1].each do |hist|
                    li{class=hist.css_class}: span= display_event_for_user(hist.event)

          - @game.journals.each do |journal|
            - next unless journal.persisted?
            - if journal.histories.present?
              - unless journal.histories.first.secret? && journal.user != current_user
                li.main-journal class=journal.histories.first.css_class data={journal_id: journal.id}
                  - if journal.order > last_fixed_journal.order
                    = form_with url: journal_path(journal), method: :delete do |f|
                      = f.button inline_svg_tag('action-undo.svg',
                                            class: 'undo-arrow',
                                            title: 'Undo to here',
                                            desc: 'Click to undo this and all later actions',
                                            aria: true), class: 'undo-button unstyle'
                  span= display_event_for_user(journal.histories.first.event)
                  - if content_for? "journal_#{journal.id}_histories"
                    ul.sub-histories
                      = content_for "journal_#{journal.id}_histories"
            - else
              li.main-journal.error-journal
                = form_with url: journal_path(journal), method: :delete do |f|
                  = f.button inline_svg_tag('action-undo.svg',
                                        class: 'undo-arrow',
                                        title: 'Undo to here',
                                        desc: 'Click to undo this and all later actions',
                                        aria: true), class: 'undo-button unstyle'
                span= "#{journal.user&.name || 'The game'}'s choice for '#{journal.class.from(journal.user).in(@game).question.text(@game.game_state)}', which is now invalid"

  = link_to 'Back', games_path
