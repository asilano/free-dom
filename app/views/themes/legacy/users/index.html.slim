nav
  h2.inline User Rankings
  h2.right= link_to 'View Games', games_path
= link_to "What's this?", 'javascript:void(0)', class: 'light'
#explain_ranking.hidden
  p This table shows the ranking and rating of each registered user by a number of measures.
  p Users who have yet to complete a game are hidden, as are users who haven't completed a game in the last 4 months or so. Users who haven't completed a game in the last two weeks are progressively faded according to how long they've been inactive. You are always shown.
  p The table is sortable – simply click on the column headings; click again to reverse the sort order.
  p Hopefully, most of the table's fields are pretty self-explanatory. However, three of the fields are a little more complex:
  dl
    dt Mean normalised position
    dd
      | A player's
      em normalised position
      |  is a comparable measure of where they finished in a game, regardless of the number of players. The winner has a normalised position of 0.0 for that match, the loser has 1.0, and the remaining players are evenly spaced (so second place in a three-player game has 0.5; in a four-player, 0.333). If multiple players tie, they all receive the appropriate normalised position as if they were a single player (so two players tying for second in a four-player game each get 0.5). The mean normalised position simply returns the total of all a user's positions, divided by the number of games.
    dt Rating
    dd
      em Rating
      |  is a measure of the player's effective skill. It is based on the Elo rating system as used for chess and
      em  Magic: the Gathering
      | . Each user starts with a rating of 1600, and their score is adjusted after each match – for each player they finished behind, their rating decreases; for each player they finished ahead of, their rating increases. The change is related to the difference in the two player's current rating – you gain more for defeating a good opponent – and the two players gain and lose the same amount.
      br
      em.lighter Technical info: K-Value for each pairing is 16, divided by the number of pairings for a player (that is, the number of players minus 1)
    dt Rating (score-adjusted)
    dd
      | A user's
      em  score-adjusted rating
      |  is similar to their rating, but takes the difference between each player's score into account when calculating how much to adjust the ratings by. If you win by a large margin, you'll gain more score-adjusted rating than if you win by the skin of your teeth.
      br
      span.lighter
        em Technical info: K-Value for each pairing is
        |  d
        sup s
        em , where
        |  d
        em  is the difference in score, and
        |  s
        em
          |  = log
          sub 6
        | k
        em , where
        |  k
        em  is the K-Value for the normal Rating. This assumes that a difference of 6 points per position is roughly "par".
table.tablekit.sortable
  thead
    tr
      th.sortcol Name
      th.sortcol Games played
      th.sortcol Number of Wins
      th.sortcol Mean normalised position
      th.sortcol Mean score
      th.sortcol.sortfirstdesc Rating
      th.sortcol Rating (score-adjusted)
  - @users.each do |user|
    - rank = user.ranking
    - rowclass = ranking_class(rank, user)
    - next if rowclass == "absent"
    tr class=rowclass
      td= user.name
      td= rank.num_played
      td
        = rank.num_won
        span.lastVal= rating_history(rank.num_won, rank.last_num_won)
      td
        = number_with_precision(rank.mean_norm_pos)
        span.lastVal= rating_history(rank.mean_norm_pos, rank.last_mean_norm_pos, swap: true)
      td
        = number_with_precision(rank.mean_score)
        span.lastVal= rating_history(rank.mean_score, rank.last_mean_score)
      td
        = rank.result_elo.to_i
        span.lastVal= rating_history(rank.result_elo.to_i, rank.last_result_elo.to_i)
      td
        = rank.score_elo.to_i
        span.lastVal= rating_history(rank.score_elo.to_i, rank.last_score_elo.to_i)
br
= link_to 'New user', new_user_path
|  |
= link_to 'Game index', games_path
