.cell.player#current-player
  h2= player.name
  - if game.questions.any? { |q| q.player == player }
    p
      strong> Current question:
      ul.question-list
        - game.questions.select { |q| q.player == player }.compact.each do |question|
          li= question.text(game.game_state)

  / Player-button controls
  - game.controls_for(Current.user).select { |ctrl| ctrl.scope == :player }.each do |ctrl|
    = form_with model: game.journals.build, class: 'player-buttons', local: true do |f|
      = f.hidden_field :game_id
      = f.hidden_field :type, value: ctrl.journal_type
      = f.hidden_field :fiber_id, value: ctrl.fiber_id
      = f.hidden_field :order, value: Journal.expected_order(ctrl.fiber_id, game)
      - ctrl.values.each do |val|
        = f.button val[0], value: val[1], name: "journal[params][#{ctrl.key}]", class: 'button', data: { disable_with: val[0] }

  / Cards held in hand
  h5 Hand
  - hand_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :hand }
  = render partial: "game_board/control_skeleton", collection: hand_controls, locals: { game: game }
  = render CardGridComponent.new(cards: player.hand_cards, controls: hand_controls)
  - if (with_hand_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :with_hand }).present?
    = render partial: "game_board/control_skeleton", collection: with_hand_controls, locals: { game: game }
    - with_hand_controls.each do |control|
      .grid-container.fluid.gap-above
        .floating-control
          = render ControlFactory.component_from(control).new(control: )

  / Cards in play
  h5 In Play
  - play_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :play }
  = render partial: "game_board/control_skeleton", collection: play_controls, locals: { game: game }
  = render CardGridComponent.new(cards: player.played_cards, controls: play_controls)

  / Cards in discard
  h5 Discarded
  - discard_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :discard }
  = render partial: "game_board/control_skeleton", collection: discard_controls, locals: { game: game }
  = render CardGridComponent.new(cards: player.discarded_cards, controls: discard_controls, stacked: true)

  / Deck representation
  h5 Deck
  /= render partial: "game_board/control_skeleton", collection: deck_controls, locals: { game: game }
  .grid-container.fluid
    .grid-x.grid-margin-x
      .cell.card.back-wrapper{class=('no-card' if player.deck_cards.empty?)}
        .card-back
          = player.deck_cards.count
          - if player.deck_cards.any?(&:revealed) || player.deck_cards.any?(&:peeked)
            .detail= "(#{player.deck_cards.count(&:peeked)} seen, #{player.deck_cards.count(&:revealed)} revealed)"

  / Peeked cards
  - player.peeked_cards.group_by(&:interacting_with).each do |qn, cards|
    h5= "Seen with #{qn.card_type.readable_name}"
    - peeked_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :peeked && ctrl.question == qn }
    = render partial: "game_board/control_skeleton", collection: peeked_controls, locals: { game: game }
    = render CardGridComponent.new(cards: cards, controls: peeked_controls)

  / Revealed cards
  - player.revealed_cards.group_by(&:interacting_with).each do |qn, cards|
    h5= "Revealed to #{qn.card_type.readable_name}"
    - revealed_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :revealed && ctrl.question == qn }
    = render partial: "game_board/control_skeleton", collection: revealed_controls, locals: { game: game }
    = render CardGridComponent.new(cards: cards, controls: revealed_controls)

  / Cards set aside not on other cards
  - set_aside_cards = player.set_aside_cards.select { |c| c.location_card.nil? }.group_by(&:interacting_with)
  - set_aside_cards.each do |qn, cards|
    h5 Set Aside
    = render CardGridComponent.new(cards: cards, controls: nil)

  / Artifacts
  = render partial: "game_board/artifacts_section", locals: { player: player, game: game }

  / Tokens (Villagers, Coffers, Pirate...)
  = render partial: "game_board/tokens_section", locals: { player: player }

  / Cash, actions, buys
  - if player == game.game_state.turn_player
    .turn-status
      h5 Status
      .counts
        .count= pluralize(player.actions, 'Action')
        .count= pluralize(player.buys, 'Buy')
      .cash
        span.cost-text= player.cash
