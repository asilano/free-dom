.cell.shrink.player
  h3= other_player.user.name
  / Cards held in hand representation
  h5 Hand
  = render CardBackCountComponent.new(cards: other_player.hand_cards)

  / Cards in play - these are visible
  - if other_player.played_cards.present?
    h5 In Play
    = render CardGridComponent.new(cards: other_player.played_cards)

  / Discarded cards - the top one is visible
  - if other_player.discarded_cards.present?
    h5 Discarded
    .grid-container.fluid
      .card-grid
        = render CardComponent.new(card: other_player.discarded_cards.first)
        - if other_player.discarded_cards.count > 1
          .cell.card
            .card-back #{other_player.discarded_cards.count - 1} more

  / Deck representation
  h5 Deck
  = render CardBackCountComponent.new(cards: other_player.deck_cards)

  / Peeked cards
  - other_player.peeked_cards.group_by(&:interacting_with).each do |qn, cards|
    h5= "Seen with #{qn.card_type.readable_name}"
    - peeked_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :peeked && ctrl.question == qn }
    = render partial: "game_board/control_skeleton", collection: peeked_controls, locals: { game: game }
    = render CardGridComponent.new(cards: cards, controls: peeked_controls)

  / Revealed cards
  - other_player.revealed_cards.group_by(&:interacting_with).each do |qn, cards|
    h5= "Revealed to #{qn.card_type.readable_name}"
    - revealed_controls = game.controls_for(Current.user).select { |ctrl| ctrl.scope == :revealed && ctrl.question == qn }
    = render partial: "game_board/control_skeleton", collection: revealed_controls, locals: { game: game }
    = render CardGridComponent.new(cards: cards, controls: revealed_controls)

  / Cards set aside not on other cards
  - set_aside_cards = other_player.set_aside_cards.select { |c| c.location_card.nil? }.group_by(&:interacting_with)
  - set_aside_cards.each do |qn, cards|
    h5 Set Aside
    = render CardGridComponent.new(cards: cards, controls: nil)

  / Artifacts
  = render partial: "game_board/artifacts_section", locals: { player: other_player, game: game }

  / Tokens (Villagers, Coffers, Pirate...)
  = render partial: "game_board/tokens_section", locals: { player: other_player }
